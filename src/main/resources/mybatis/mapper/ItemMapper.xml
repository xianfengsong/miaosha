<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.throwsnew.miaosha.dao.mapper.ItemMapper">
  <resultMap id="BaseResultMap" type="com.throwsnew.miaosha.dao.model.ItemDO">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="amount" jdbcType="BIGINT" property="amount" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="category" jdbcType="VARCHAR" property="category" />
    <result column="price" jdbcType="INTEGER" property="price" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    `id`, `amount`, `name`, `description`, `category`, `price`, `update_time`
  </sql>
  <select id="selectByExample" parameterType="com.throwsnew.miaosha.dao.model.ItemDOCriteria" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from item
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from item
    where `id` = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from item
    where `id` = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.throwsnew.miaosha.dao.model.ItemDO" useGeneratedKeys="true">
    insert into item (`amount`, `name`, `description`, 
      `category`, `price`, `update_time`
      )
    values (#{amount,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, 
      #{category,jdbcType=VARCHAR}, #{price,jdbcType=INTEGER}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.throwsnew.miaosha.dao.model.ItemDO" useGeneratedKeys="true">
    insert into item
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="amount != null">
        `amount`,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="description != null">
        `description`,
      </if>
      <if test="category != null">
        `category`,
      </if>
      <if test="price != null">
        `price`,
      </if>
      <if test="updateTime != null">
        `update_time`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="amount != null">
        #{amount,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="category != null">
        #{category,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        #{price,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByExampleSelective" parameterType="map">
    update item
    <set>
      <if test="record.id != null">
        `id` = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.amount != null">
        `amount` = #{record.amount,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        `name` = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.description != null">
        `description` = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.category != null">
        `category` = #{record.category,jdbcType=VARCHAR},
      </if>
      <if test="record.price != null">
        `price` = #{record.price,jdbcType=INTEGER},
      </if>
      <if test="record.updateTime != null">
        `update_time` = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update item
    set `id` = #{record.id,jdbcType=BIGINT},
    `amount` = #{record.amount,jdbcType=BIGINT},
    `name` = #{record.name,jdbcType=VARCHAR},
    `description` = #{record.description,jdbcType=VARCHAR},
    `category` = #{record.category,jdbcType=VARCHAR},
    `price` = #{record.price,jdbcType=INTEGER},
    `update_time` = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.throwsnew.miaosha.dao.model.ItemDO">
    update item
    <set>
      <if test="amount != null">
        `amount` = #{amount,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        `description` = #{description,jdbcType=VARCHAR},
      </if>
      <if test="category != null">
        `category` = #{category,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        `price` = #{price,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        `update_time` = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where `id` = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.throwsnew.miaosha.dao.model.ItemDO">
    update item
    set `amount` = #{amount,jdbcType=BIGINT},
      `name` = #{name,jdbcType=VARCHAR},
      `description` = #{description,jdbcType=VARCHAR},
      `category` = #{category,jdbcType=VARCHAR},
      `price` = #{price,jdbcType=INTEGER},
      `update_time` = #{updateTime,jdbcType=TIMESTAMP}
    where `id` = #{id,jdbcType=BIGINT}
  </update>
</mapper>